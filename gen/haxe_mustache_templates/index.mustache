import js.npm.Express;
import js.npm.express.*;
import js.Node;
import js.Node.*;
import js.npm.sequelize.Sequelize;
import js.node.Fs;

import Conf; // credentials and stuff
import Business;   // business logic goes and stays here

class Main {

  private static var initCache    = Node.require('sequelize-redis-cache');
  private static var redis        = Node.require('redis');
  private static var session      = Node.require('express-session');
  private static var vm           = Node.require('vm');
  private static var swaggerTools = Node.require('swagger-tools');
  private static var jsyaml       = Node.require('js-yaml');
  private static var passport     = Node.require('passport');


  private static var options = {
    controllers: './',
    useStubs: false
  };

  public static function main() {
    
    //  CONFIGURATION
    var conf = new Conf('local');

    if (process.env.exists("ENV") && process.env['ENV'] == 'production')
      conf = new Conf('production');

    if (process.env.exists("ENV") && process.env['ENV'] == 'docker')
      conf = new Conf('docker', process.env);

    // REDIS
    var redisStore = Node.require('connect-redis')(session);
    var redisclient = redis.createClient(conf.REDIS_PORT,conf.REDIS_HOST);

    // DATABASE
    var db = new Sequelize(conf.DB_NAME, conf.DB_USER, conf.DB_PASSWORD, 
      conf.DB_OPTIONS);

    /// CACHE(S)

    var dbcacher = initCache(db, redisclient);
    var cacheo = Node.require('express-redis-cache')({
        client : redisclient,
        expire : 60,
        prefix : 'app'
    });

    var dn = Node.__dirname;
    
    // SWAGGER
    var spec = Fs.readFileSync(dn+'/../app/api.yaml', 'utf8');
    var swaggerDoc = jsyaml.safeLoad(spec);

    swaggerTools.initializeMiddleware(swaggerDoc, function (middleware) {

      // EXPRESS
      var app : Application = new js.npm.Express();

      // SESSION
      app.use(new CookieParser('M4NU'));
      var ars= untyped __js__("new redisStore( { client: redisclient, ttl :  conf.SESSION_TTL})");
      
      app.use(
        session(
          {
            secret: 'orms_app',
            cookie: { maxAge: 60000 },
            store: ars, 
            saveUninitialized: true,
            resave: true,
            rolling: true
          })
      );
      

      // PASSPORT / GOOGLE TOKEN AUTH   
      if (untyped __js__('conf.GOOGLE_CLIENT_ID != undefined')) {
        var google_strategy = require('passport-google-oauth').OAuth2Strategy;

        app.use(passport.initialize());
          app.use(passport.session());

        passport.serializeUser(function(user, done) {
          done(null, user);
        });

        passport.deserializeUser(function(obj, done) {
          done(null, obj);
        });
    
        untyped __js__("Main.passport.use(new google_strategy({
         clientID: conf.GOOGLE_CLIENT_ID,
          clientSecret: conf.GOOGLE_CLIENT_SECRET,
          callbackURL: conf.GOOGLE_CALLBACK_URL,
          scope: [ 'email', 'profile', 'https://www.googleapis.com/auth/userinfo.email' ]
        },
        function(accessToken, refreshToken, profile, done) {
          if (profile._json.domain == '{{userDomain}}') 
           return done(null,profile);
           else
           return done(new Error('something bad happened'));
         }
        ))");
    
        app.get('/',
        untyped function(req, res) {
          res.send('<a href="/google">login with google</>');
        });

        app.get('/google',
        passport.authenticate('google',{scope: [ 'email', 'profile', 'https://www.googleapis.com/auth/userinfo.email' ]}),
        untyped function(req, res){
        });

        app.get('/callback', 
        passport.authenticate('google', untyped { failureRedirect: '/logout' }),
        untyped function(req, res) {
          req.session.status = true;
          res.redirect('/site');
        });

        app.get('/logout',
        untyped function(req, res) {
            req.session.status = false;
            res.redirect('/');
        });

      }

      app.use(BodyParser.json());
      app.use(BodyParser.urlencoded({extended: true}));


      // SWAGGER API DOC
      app.use('/doc', new js.npm.express.Static(dn+'/../node_modules/orms/doc'));
      app.use('/haxedoc', new js.npm.express.Static(dn+'/pages'));
      app.use('/api.yaml', new js.npm.express.Static(dn+'/../app/api.yaml'));
 
      // COMPANION WEBSITE
      app.use('/site', untyped function(req, res, next) {
        if (req.session.status== true) {
          next(); 
        } else {

          res.redirect("/"); 
        }
      }, new js.npm.express.Static(dn+'/../site'));

      // ROUTES SCAFOLDING FROM DOC 
      /**************************************************/
      // YOU CAN WRITE your BUSINESS CODE IN Business Class
      // ie : Business.get_method = function(req,res) {...}
      /**************************************************/
      // Hacks.. use summary to keep ttl and other stuff
      
      {{#operations}}{{#operation}}
      var apiOp = new ApiOperation("{{& path}}", "{{& summary}}");
      var args  = apiOp.getArgs();
      var extra = apiOp.getExtraParams();
      var path  = apiOp.getPath();
      var cacheExpire = function(req, res, next) {
        next();
      };
      if (args.ttl != '0') 
        cacheExpire = cacheo.route({ expire: args.ttl });
      app.{{httpMethod}}( conf.BASE_URL+path, untyped cacheExpire,
          function(req : Request, res : Response){ 
            untyped Business.{{httpMethod}}_{{operationId}}(db,req,res,dbcacher,cacheo,extra);
          }
      );
      {{/operation}}{{/operations}}

      app.use(middleware.swaggerMetadata());
      app.use(middleware.swaggerValidator());
    
      app.listen(conf.API_PORT);
      trace('api running on port '+conf.API_PORT);

    });
  }
}

class ApiOperation {

  var txtArgs   : String;
  var args      : Dynamic;
  var path      : String;
  var urlParams : Dynamic;
  var extraParams     : Dynamic; 

  public function new(pathParam, argsParam) {

    path = pathParam;
    txtArgs = argsParam;
    txtArgs   = StringTools.replace(txtArgs,"'",'"');
    args = haxe.Json.parse(txtArgs);
    
    var r = ~/\{([^}]+)\}/g;
    urlParams = [];
    r.map(path, function(r) {
      var match = r.matched(0);
      switch (match) {
          default: 
            var f = match;
            f   = StringTools.replace(f,'{',':');
            f   = StringTools.replace(f,'}','');
            urlParams.push(f); 
            return match;
      };
    });

    path   = StringTools.replace(path,'{',':');
    path   = StringTools.replace(path,'}','');

    // extraParams will hold all our query parameters
    extraParams = { 'url_params' : urlParams , 'ttl' : args.ttl, 'xttl' : args.xttl, 'cachekey' :  args.cachekey, 'xcachekey' : args.xcachekey };
 
  }

  public function getArgs() {
    return args;
  }

  public function getExtraParams() {
    return extraParams;
  }

  public function getPath() {
    return path;
  }

}